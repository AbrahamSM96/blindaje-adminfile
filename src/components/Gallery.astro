---
import 'photoswipe/style.css'
import * as fs from 'fs'
import * as path from 'path'
// import editionsInfo from '../data/infografias-meta-gallery.json'
interface Props {
  metaPhotos?: { width: number; height: number }[] | null
  description: string
}
const offset = 10

// const photos = editionsInfo.slice(0, offset)

const nameCurrentPath = Astro.url.pathname.replace('/', '')

const dir = `./public/blindaje_material/${nameCurrentPath}`

const countFilesInDirectory = (dirPath: string) => {
  try {
    // Sincroniza la lectura del contenido del directorio
    const files = fs.readdirSync(dirPath)

    // Filtra para contar solo archivos, excluyendo directorios
    const fileCount = files.filter((file) =>
      fs.statSync(path.join(dirPath, file)).isFile()
    ).length

    return fileCount
  } catch (error) {
    console.error('Error reading directory:', error)
    return 0
  }
}

const dataLengthFiles = countFilesInDirectory(dir)
const { metaPhotos, description = '' } = Astro.props
---

<section class="max-w-10xl mx-auto px-10 pt-0 pb-10 md:pb-20 md:px-20">
  <h2
    class="mx-auto mb-8 text-center text-3xl lg:text-6xl font-semibold tracking-wide uppercase"
  >
    {nameCurrentPath}
  </h2>
  <p class="text-center text-2xl">{description}</p>

  <masonry-layout
    gap="24"
    maxcolwidth="600"
    class="lg:mx-auto mx-4 py-20"
    id="gallery"
  >
    {
      Array.isArray(metaPhotos) &&
        metaPhotos.map(({ height, width }, i) => (
          <>
            <a
              class="group rounded-xl hover:scale-105 hover:contrast-[110%] transition-all relative"
              href={`/blindaje_material/${nameCurrentPath}/${nameCurrentPath}-${
                i + 1
              }.webp`}
              target="_blank"
              data-cropped="true"
              data-pswp-width={width}
              data-pswp-height={height}
            >
              <img
                class="rounded-xl object-cover w-full h-auto"
                loading="lazy"
                src={`/blindaje_material/${nameCurrentPath}/${nameCurrentPath}-${
                  i + 1
                }.webp`}
                alt={`${nameCurrentPath}-${i}`}
              />
              <img
                class="blur-md opacity-0 group-hover:opacity-100 absolute inset-0 transition contrast-150 -z-10 object-cover"
                loading="lazy"
                src={`/blindaje_material/${nameCurrentPath}/${nameCurrentPath}-${
                  i + 1
                }.webp`}
                alt={`Imagen con efecto blur para hacer de sombra de una fotografía de ${nameCurrentPath}-${i}`}
              />
            </a>
          </>
        ))
    }
  </masonry-layout>

  {
    Array.isArray(metaPhotos) && (
      <div class="text-center mx-auto">
        <button id="load-more">Descúbrelas todas</button>
      </div>
    )
  }

  {
    !Array.isArray(metaPhotos) && (
      <>
        <div class="flex justify-center h-full w-full items-center p-32">
          <h1 class="text-3xl  ">Lo siento, no hay información disponible</h1>
        </div>
      </>
    )
  }
</section>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox'
  import '@appnest/masonry-layout'

  document.addEventListener('astro:page-load', () => {
    const lightbox = new PhotoSwipeLightbox({
      gallery: '#gallery',
      children: 'a',
      pswpModule: () => import('photoswipe')
    })

    lightbox.init()
  })
</script>

<script define:vars={{ offset }}>
  document.addEventListener('astro:page-load', () => {
    const $button = document.querySelector('#load-more')
    // clone first element of gallery
    const $first = document.querySelector('#gallery a:first-child')

    $button?.addEventListener('click', async (e) => {
      $button.remove()
      e.preventDefault()
      const res = await fetch('/api/gallery.json?edition=1&offset=9')
      const images = await res.json()

      const html = images
        .map((img, index) => {
          const imgIndex = index + offset
          const $clone = $first?.cloneNode(true)

          $clone.setAttribute('data-pswp-width', img.width)
          $clone.setAttribute('data-pswp-height', img.height)
          $clone.setAttribute(
            'href',
            `/blindaje_material/${nameCurrentPath}/${nameCurrentPath}-${imgIndex}.webp`
          )
          $clone.classList.add('animate-fade-up')
          $clone.classList.add('animate-delay-300')
          $clone.classList.add('opacity-0')
          $clone
            .querySelector('img:first-child')
            .setAttribute(
              'src',
              `/blindaje_material/${nameCurrentPath}/${nameCurrentPath}-${imgIndex}.webp`
            )
          $clone
            .querySelector('img:last-child')
            .setAttribute(
              'src',
              `/blindaje_material/${nameCurrentPath}/${nameCurrentPath}-${imgIndex}.webp`
            )

          return $clone?.outerHTML
        })
        .join('')

      document.querySelector('#gallery')?.insertAdjacentHTML('beforeend', html)
      document.querySelector('masonry-layout').scheduleLayout()
    })
  })
</script>

<style is:global>
  .pswp {
    --pswp-bg: #00012a;
  }

  #gallery a {
    cursor: zoom-in;
    animation: fade-up-images linear both;
    animation-timeline: view();
    animation-range: entry 10% cover 20%;
  }

  @keyframes fade-up-images {
    0% {
      opacity: 0;
      translate: 0 50px;
      scale: 0.7;
    }
    100% {
      opacity: 1;
      translate: 0 0;
      scale: 1;
    }
  }
</style>
